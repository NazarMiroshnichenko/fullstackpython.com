<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Matt Makai</title><link>http://www.fullstackpython.com/</link><description></description><atom:link href="http://www.fullstackpython.com/feeds/matt-makai.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 11 May 2016 00:00:00 -0400</lastBuildDate><item><title>How to Send SMS Text Messages with Python</title><link>http://www.fullstackpython.com/send-sms-text-messages-python.html</link><description>&lt;p&gt;Short Message Service (SMS) text messages are ubiquitous for communication
all over the world. It is easy to send SMS text messages from a 
&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; application using a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;. 
Let's take a look at the tools we need to quickly add SMS capability to our
Python apps.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This guide works with both Python 2 and 3, so make sure you have one of those
two versions installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.python.org/pypi/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need assistance getting pip and virtualenv installed, check out the
first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide that'll show how to install system packages for those tools.&lt;/p&gt;
&lt;h2&gt;Using a Web API&lt;/h2&gt;
&lt;p&gt;We're going to use a web API to make sending SMS easier and more reliable.
Head to the 
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free trial account&lt;/a&gt;. If you already have a Twilio account (and you should - it's awesome
for more than just sending text messages!) then sign into your existing
account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send text messages to your own 
validated phone number.  When you want to send SMS to any phone number in 
your country or other countries then you can upgrade your account to send 
messages for fractions of a cent.&lt;/p&gt;
&lt;p&gt;After signing up, you will get a free phone number in your country. We can
use that phone number without any configuration to send outbound text 
messsages. You can also receive text messages but that requires changing
the Request URL webhook in the phone number configuration screen - we'll
cover that in a future blog post.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependency&lt;/h2&gt;
&lt;p&gt;Our code will use a helper library to make it easier to send text messages
from Python. We are going to install the helper library from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. First we need to
create the virtualenv. In your terminal use the following command to create
a new virtualenv. If you need to install virtualenv take a look at the
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv sendsms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source sendsms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after we properly activate the virtualenv
to something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now install the Twilio Python helper library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install twilio
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The helper library is now installed and we can use it with the Python code 
we create and execute.&lt;/p&gt;
&lt;h2&gt;Sending An SMS From Python&lt;/h2&gt;
&lt;p&gt;Fire up the Python interpreter in the terminal using the &lt;code&gt;python&lt;/code&gt; command,
or create a new file named &lt;code&gt;send_sms.py&lt;/code&gt;. Enter the following code into
the interpreter or into the new Python file.&lt;/p&gt;
&lt;p&gt;We need to grab our account credentials from the Twilio Console to connect 
our Python code to our Twilio account. Go to the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt; and copy the Account SID
and Authentication Token into your Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/console-tokens.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# we import the Twilio client from the dependency we just installed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;

&lt;span class="c"&gt;# the following line needs your Twilio Account SID and Auth Token&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ACxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zzzzzzzzzzzzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# change the &amp;quot;from_&amp;quot; number to your Twilio number and the &amp;quot;to&amp;quot; number&lt;/span&gt;
&lt;span class="c"&gt;# to the phone number you signed up for Twilio with, or upgrade your&lt;/span&gt;
&lt;span class="c"&gt;# account to send SMS to any phone number&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+19732644152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;+12023358536&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                       &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello from Python!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the lines above that start with &lt;code&gt;#&lt;/code&gt; are comments. Once you enter that 
code into the interpreter or run the Python script using 
&lt;code&gt;python send_sms.py&lt;/code&gt; the SMS will be sent.&lt;/p&gt;
&lt;p&gt;In a few seconds you should see a message appear on your phone. I'm on
iOS so here's how the text message I received looked.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160511-send-sms-python/hello-from-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That's it! You can add this code to any Python code to send text messages.
Just keep your Auth Token secret as it'll allow anyone that has it to use
your account to send and receive messages.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/makaimc"&gt;makaimc&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Wed, 11 May 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-11:send-sms-text-messages-python.html</guid></item><item><title>How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS</title><link>http://www.fullstackpython.com/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;Ubuntu's latest Long Term Support (LTS) 
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; was released last month, in 
April 2016. The 16.04 update for Ubuntu is known as "Xenial Xerus" and
it's the first Ubuntu release to include &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; 
as the default Python installation.&lt;/p&gt;
&lt;p&gt;We can use this new Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;We'll need the Ubuntu 16.04 release along with a few other libraries to 
complete our project. You don't have to install these tools just yet, 
we will get to them as we progress through the walkthrough. Our requirements
and their current versions as of May 10, 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5&lt;/a&gt; 
  (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework version 
  &lt;a href="http://flask.pocoo.org/docs/0.10/"&gt;0.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're running on Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. I'm using amd64 for development and testing
in this tutorial.&lt;/p&gt;
&lt;p&gt;Once you boot up Ubuntu, you should see a screen like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up a terminal window to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 system version Ubuntu comes with and where its
executable is stored using these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages. We will get prompted 
for the superuser password because restricted system access is needed 
to install packages through 
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install virtualenv python-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to let the system package installation process do its job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;In the previous section, &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; were installed to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Flask and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory for the virtualenvs. Then create a new virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/flaskproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtualenv.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install whatever
dependencies we want, in our case Flask and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Flask and Gunicorn&lt;/h2&gt;
&lt;p&gt;We can finally install Flask and Green Unicorn via the pip command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install flask gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's a good sign if we receive no errors like we see in the following 
screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new directory under our home directory that will store our
Flask project. Change directory into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir ~/flaskproj
cd ~/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;__init__.py&lt;/code&gt; within our &lt;code&gt;flaskproj&lt;/code&gt; directory so
we can test to make sure Flask is working properly. I prefer to use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;__init__.py&lt;/code&gt; write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Flask development server using the 
&lt;code&gt;python __init__.py&lt;/code&gt; command. Instead run the Flask app with
Gunicorn. Go to the directory above the &lt;code&gt;flaskproj&lt;/code&gt; folder, in our
case we can enter &lt;code&gt;cd ~&lt;/code&gt; then use the &lt;code&gt;gunicorn&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn flaskproj:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we can bring up our shell Flask app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160510-ubuntu-flask-gunicorn/it-works.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now ready for some real &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;That's a simple setup for developing with Flask and Gunicorn on 
Ubuntu 16.04. If you need an in-depth step-by-step tutorial to 
deploy your &lt;a href="/wsgi-servers.html"&gt;WSGI-powered web application&lt;/a&gt; to a 
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To determine what to code next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/makaimc"&gt;makaimc&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Tue, 10 May 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-10:python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS</title><link>http://www.fullstackpython.com/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html</link><description>&lt;p&gt;Ubuntu released the newest Long Term Support (LTS) version of its 
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; in April 2016. The update
brings Ubuntu to version 16.04 and its latest code name is 
"Xenial Xerus". 16.04 is the first Ubuntu release to include 
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; as the default Python installation.&lt;/p&gt;
&lt;p&gt;Let's use this newest Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/django.html"&gt;Django&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;We will need a few tools to complete our project. Don't worry about 
installing these just yet as we'll get to them as we progress through the
tutorial. The tools and their current versions as of May 9, 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5&lt;/a&gt; 
  (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework version 
  &lt;a href="https://docs.djangoproject.com/en/1.9/releases/1.9/"&gt;1.9.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're running on Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; 
(this is what I use, but it's Mac OS X-only) or 
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine, but I use amd64 for development and testing
in this blog post.&lt;/p&gt;
&lt;p&gt;When we boot up for the first time, we should see a desktop screen like this 
one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up terminal to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 version Ubuntu comes with, as well as where its
executable is stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation first needs system packages for Python development.
You'll be prompted for your superuser password because restricted system
access is required to install packages through apt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install virtualenv python-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; and let the system package installation process run.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The basic system packages we need are now installed so we can proceed to
our Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;Virtualenv and pip for isolating and handling 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; were just 
installed via system packages so we can now use them to obtain Django and 
Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory to store virtualenvs then put a new virtualenv in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;source ~/venvs/djproject/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see our prompt change so that we know the virtualenv is properly 
activated.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv with Python 3 is activated so we can install whatever
dependencies we want, such as Django and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Django and Gunicorn&lt;/h2&gt;
&lt;p&gt;Time to install Django and Green Unicorn into our virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install django gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors is a good sign everything worked for us.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new Django project named &lt;code&gt;djproject&lt;/code&gt;, or whatever you want to name
your project. Then change into the directory for the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;django-admin startproject djproject
cd djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run Django with the development server using the 
&lt;code&gt;python manage.py runserver&lt;/code&gt; command. However, start Django up with
Gunicorn instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gunicorn djproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we can bring up our shell project in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/source/static/img/160509-ubuntu-django-gunicorn/it-worked.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Ready for development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Those are the basics for starting development with Django and Gunicorn on 
Ubuntu 16.04. If you need an even more in-depth step-by-step tutorial to 
deploy your Python web application to a production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To figure out what to do next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/makaimc"&gt;makaimc&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Mon, 09 May 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-09:python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html</guid></item><item><title>The Full Stack Python Blog</title><link>http://www.fullstackpython.com/full-stack-python-blog.html</link><description>&lt;p&gt;Full Stack Python began way back in December 2012 when I started writing
the initial &lt;a href="/deployment.html"&gt;deployment&lt;/a&gt;, &lt;a href="/servers.html"&gt;server&lt;/a&gt;, 
operating system, web server and WSGI server pages. Since then, the pages
have expanded out into a 
&lt;a href="/table-of-contents.html"&gt;boatload of other areas&lt;/a&gt;
including subjects outside the deployment topics I originally started the
site to explain.&lt;/p&gt;
&lt;p&gt;Frequently though I wanted to write a Python walkthrough that was not a
good fit for the page format I use for each topic. Many of those walkthroughs
became &lt;a href="https://www.twilio.com/blog/author/mmakai"&gt;Twilio blog posts&lt;/a&gt;
but not all of them were quite the right fit on there. I'll still be writing
plenty more Twilio tutorials, but this &lt;a href="/blog.html"&gt;Full Stack Python blog&lt;/a&gt;
is the spot for technical posts that fall outside the Twilio domain.&lt;/p&gt;
&lt;p&gt;Let me know what you think and what tutorials you'd like to see in the future. 
Hit me up on Twitter &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Sun, 08 May 2016 00:00:00 -0400</pubDate><guid>tag:www.fullstackpython.com,2016-05-08:full-stack-python-blog.html</guid></item></channel></rss>